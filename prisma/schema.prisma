// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Sports {
  CRICKET
  FOOTBALL
  BASKETBALL
  TENNIS
  BADMINTON
  SWIMMING
}

model Account {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String  
  type             String 
  provider         String   
  providerAccountId String  
  refresh_token    String?  
  access_token     String?  
  expires_at       Int?   
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?  
  user             User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified  DateTime?
  password      String?   // For email/password auth
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())

  payments      Payment[]
  accounts      Account[]
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  amount          Float    // Payment amount
  currency        String   // Currency used (e.g., "INR")
  sports          Sports   // Enum for sport-related payments
  month           String   // For storing the payment month
  transactionId   String   @unique // Razorpay's unique payment ID
  orderId         String   @unique // Razorpay's unique order ID
  status          String   // Payment status (e.g., "captured", "failed")
  paymentMethod   String   // Method of payment (e.g., "card", "netbanking")
  cardDetails     String?  // Card info (e.g., "Visa ending with 1234"), nullable
  bank            String?  // Bank name if payment is via net banking, nullable
  createdAt       DateTime @default(now()) // Transaction timestamp
}


model Query {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  query     String
  createdAt DateTime @default(now())
}